String :
Strings are immutable in JS. When ever we try to change a string, a new string is created and old remains same.
Methods :
"sdsabcdsd".indexOf("abc")      //3 -> Gives first occurance of input string
Method chaining : "abc".trim().toUpperCase();
Slice : returns a part of the original string as new string
let str = "ILoveCoding"
str.slice(5);      // Coding - second parameter is takes as length of the string
str.slice(1,5);      // Love - First index is inclusive and last index is exclusive
str.slice(-6);      //Coding - str.length-1 last 6 characters are printed

Replace : 
"abcabc".replace("abc","pq");       //pqabc -> replaces first occurance of first parameter with second parameter
"abc".repeat(3);        //abcabcabc -> Repeats parent string n number of times based on input parameter

Arrays : In JS arrays are of type object
mixed array -  in JS arrays can store different type of data also
let info = ["aman", 1, 2.2];
Empty Array - let newArr = [];
Arrays are mutable
let fruits = ["apple", "mango];
fruits[0] = "banana";       //fruits=["banana", "mango"];
Array Methods :
let arr = [1,2,10];
arr.push(10);       // adds element to the last
arr.pop();      //removes last element and returns it
arr.shift();        // Removes first element and returns it.
arr.unshift(11);        //adds new element to the start of the arrays and shifts remaining elements
indexOf : arr.indexOf(11);      //-1
includes : arr.includes(11);        //false
arr1.concat(arr2)       returns concatinated array as new array and initial arrays are unchanged
arr.reverse         // reverses array -  original array is changed
arr.slice(1,2)      // creates array from index 1 and excludes index 2= [1]
Splice: Remove elements and add new elements - Changes the original array (while slice doesnot change original array)
let colors = ["red", "yellow", "blue", "pink", "white"];
colors.splice(4);       //removes all elements starting from 4th index element and returns it
colors.splice(1,1,"green","black");         // starting from 1st index delete 1 elememt and place the listed elements
splice(start, delete count, item0...itemn)      from where to start deleting, count of elements to delete, items to be inserted

Sort : let arr = [100,99,5]; ->100,5,99 (but works fine for strings and characters)
arr.sort(); - Internally converts the elements to strings and then sorts

Array References :
[1] ==[1]       // false
[1] ===[1]      //false
Reference means address. The above are false, since == or=== compares the address location of the array which are unequal and not the values.
let arr = ['a','b'];
let arrCopy = arr;      //reference gets copied
arrCopy.push('c');
arr -> ['a','b','c']        // changes gets reflected in original array, sice the reference got copied

Constant Array :
const arr = [1,2,3,4];
arr.push(5);        //works and 5 gets added
push pop and other operations work. Direct assignment of new array doesnot work
arr = [8,9];        // doesnot work and throws exception
const makes the array to have a constant address. When we assign a new array then we are changing the reference address of the array which fails.
By using constant array we cannot assign null values to wrong values to the array after initial assignment.

Nested Arrays : Array inside array
let arr = [[]];









